/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,23],$V2=[1,9],$V3=[1,19],$V4=[1,20],$V5=[1,21],$V6=[1,22],$V7=[1,16],$V8=[1,17],$V9=[1,18],$Va=[5,8,16,19,23,24,25,26,31,44,45],$Vb=[16,46],$Vc=[16,21,46],$Vd=[2,21],$Ve=[5,16,19,23,24,25,26,31,44,45],$Vf=[5,10,11,16,19,23,24,25,26,31,44,45],$Vg=[2,40],$Vh=[1,49],$Vi=[1,51],$Vj=[5,8,10,16,19,23,24,25,26,31,44,45],$Vk=[1,60],$Vl=[1,73],$Vm=[1,67],$Vn=[1,64],$Vo=[1,65],$Vp=[1,66],$Vq=[1,68],$Vr=[1,69],$Vs=[1,70],$Vt=[1,71],$Vu=[1,72],$Vv=[1,88],$Vw=[1,89],$Vx=[1,90],$Vy=[1,91],$Vz=[1,92],$VA=[1,93],$VB=[1,95],$VC=[1,96],$VD=[1,97],$VE=[1,98],$VF=[1,99],$VG=[1,100],$VH=[1,101],$VI=[1,102],$VJ=[1,103],$VK=[1,104],$VL=[1,105],$VM=[1,106],$VN=[1,107],$VO=[1,108],$VP=[1,109],$VQ=[1,110],$VR=[1,111],$VS=[5,8,10,16,19,22,23,24,25,26,29,31,34,36,38,44,45,47,48,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,83,86,91,92,93,94,95,96],$VT=[2,72],$VU=[1,120],$VV=[1,117],$VW=[1,119],$VX=[16,34,83,86,91,93,94,95,96],$VY=[2,74],$VZ=[5,8,10,16,19,21,22,23,24,25,26,29,31,34,36,38,44,45,47,48,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,82,83,86,91,92,93,94,95,96],$V_=[1,155],$V$=[5,8,10,16,19,22,23,24,25,26,29,31,34,36,38,44,45,47,48,51,52,83,86,91,92,93,94,95,96],$V01=[5,8,10,16,19,22,23,24,25,26,29,31,34,36,38,44,45,47,48,51,52,54,55,56,83,86,91,92,93,94,95,96],$V11=[5,8,10,16,19,22,23,24,25,26,29,31,34,36,38,44,45,47,48,51,52,54,55,56,57,58,59,60,61,62,83,86,91,92,93,94,95,96],$V21=[5,8,10,16,19,22,23,24,25,26,29,31,34,36,38,44,45,47,48,51,52,54,55,56,57,58,59,60,61,62,63,64,65,83,86,91,92,93,94,95,96],$V31=[1,189],$V41=[1,196],$V51=[29,47,48,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66],$V61=[34,91,93];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"SCRIPT":4,"EOF":5,"IMPORT":6,"DECL":7,"importKW":8,"FILES":9,"semicolon":10,"comma":11,"fileName":12,"FUNCTION_DECL":13,"VAR_DECL":14,"TYPE_R":15,"id":16,"PARAMETERS":17,"BLOCK":18,"voidType":19,"TYPE":20,"leftS":21,"rightS":22,"intType":23,"doubleType":24,"booleanType":25,"charType":26,"leftP":27,"PARAMETERS_LIST":28,"rightP":29,"PARATEMERS_LIST":30,"varKW":31,"leftC":32,"SENTENCES":33,"rightC":34,"VAR_T1":35,"asignment":36,"VAR_T2":37,"colonAsignment":38,"VAR_T3":39,"VAR_T4":40,"VAR_T5":41,"ID_LIST":42,"EXPRESSION":43,"constKW":44,"globalKW":45,"LIST":46,"incOp":47,"decOp":48,"EXPRESION":49,"xorOp":50,"orOp":51,"andOp":52,"notOp":53,"notEquals":54,"equalsValue":55,"equalsReference":56,"lessThan":57,"lessEquals":58,"greaterThan":59,"greaterEquals":60,"plusOp":61,"minusOp":62,"timesOp":63,"divOp":64,"modOp":65,"powOp":66,"stringValue":67,"intValue":68,"doubleValue":69,"trueValue":70,"falseValue":71,"CALL":72,"ACCESS_LIST":73,"SENTENCE":74,"ASIGNMENT":75,"IF_SENTENCE":76,"SWITCH_SENTENCE":77,"WHILE_SENTENCE":78,"DOWHILE_SENTENCE":79,"FOR_SENTENCE":80,"ACCESS":81,"dot":82,"ifKW":83,"ELSE_SENTENCE":84,"elseKW":85,"switchKW":86,"SWITCH_BODY":87,"CASES_LIST":88,"DEFAULT_CASE":89,"SINGLE_CASE":90,"caseKW":91,"colon":92,"defaultKW":93,"whileKW":94,"doKW":95,"forKW":96,"FOR_BODY":97,"FOR_START":98,"FOR_END":99,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"importKW",10:"semicolon",11:"comma",12:"fileName",16:"id",19:"voidType",21:"leftS",22:"rightS",23:"intType",24:"doubleType",25:"booleanType",26:"charType",27:"leftP",28:"PARAMETERS_LIST",29:"rightP",31:"varKW",32:"leftC",34:"rightC",36:"asignment",38:"colonAsignment",44:"constKW",45:"globalKW",46:"LIST",47:"incOp",48:"decOp",49:"EXPRESION",50:"xorOp",51:"orOp",52:"andOp",53:"notOp",54:"notEquals",55:"equalsValue",56:"equalsReference",57:"lessThan",58:"lessEquals",59:"greaterThan",60:"greaterEquals",61:"plusOp",62:"minusOp",63:"timesOp",64:"divOp",65:"modOp",66:"powOp",67:"stringValue",68:"intValue",69:"doubleValue",70:"trueValue",71:"falseValue",82:"dot",83:"ifKW",85:"elseKW",86:"switchKW",91:"caseKW",92:"colon",93:"defaultKW",94:"whileKW",95:"doKW",96:"forKW"},
productions_: [0,[3,2],[4,2],[4,2],[4,3],[6,2],[6,3],[9,3],[9,1],[7,2],[7,2],[7,1],[7,1],[13,4],[13,4],[15,3],[15,1],[20,1],[20,1],[20,1],[20,1],[20,1],[17,3],[17,2],[30,4],[30,4],[30,2],[30,2],[18,3],[14,1],[14,3],[14,2],[14,2],[14,1],[14,2],[14,1],[14,2],[14,1],[14,2],[42,3],[42,1],[35,4],[37,4],[39,4],[40,4],[41,2],[43,2],[43,2],[43,3],[43,3],[43,3],[43,2],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,2],[43,3],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,2],[33,2],[33,1],[74,1],[74,2],[74,1],[74,1],[74,1],[74,1],[74,2],[74,1],[75,4],[73,2],[73,1],[81,2],[81,3],[81,2],[72,4],[72,3],[76,5],[76,6],[84,2],[84,2],[77,7],[87,1],[87,2],[88,2],[88,1],[90,4],[89,3],[78,5],[79,6],[80,5],[97,5],[97,4],[97,4],[97,3],[97,4],[97,3],[97,3],[98,4],[98,1],[99,1],[99,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,6:3,7:4,8:$V0,13:6,14:7,15:8,16:$V1,19:$V2,20:15,23:$V3,24:$V4,25:$V5,26:$V6,31:$V7,35:10,37:11,39:12,40:13,41:14,44:$V8,45:$V9},{1:[3]},{5:[1,24]},{7:25,13:6,14:7,15:8,16:$V1,19:$V2,20:15,23:$V3,24:$V4,25:$V5,26:$V6,31:$V7,35:10,37:11,39:12,40:13,41:14,44:$V8,45:$V9},{6:26,8:$V0,13:27,14:28,15:8,16:$V1,19:$V2,20:15,23:$V3,24:$V4,25:$V5,26:$V6,31:$V7,35:10,37:11,39:12,40:13,41:14,44:$V8,45:$V9},{9:29,12:[1,30]},o($Va,[2,11]),o($Va,[2,12]),{16:[1,31],42:32,46:[1,33]},{16:[1,34]},o($Va,[2,29],{36:[1,35]}),{10:[1,37],38:[1,36]},o($Va,[2,33],{10:[1,38]}),o($Va,[2,35],{10:[1,39]}),o($Va,[2,37],{10:[1,40]}),o($Vb,[2,16],{21:[1,41]}),{16:[1,42]},{16:[1,43]},{16:[1,44]},o($Vc,[2,17]),o($Vc,[2,18]),o($Vc,[2,19]),o($Vc,[2,20]),o($Vc,$Vd),{1:[2,1]},{5:[2,2],13:27,14:28,15:8,16:$V1,19:$V2,20:15,23:$V3,24:$V4,25:$V5,26:$V6,31:$V7,35:10,37:11,39:12,40:13,41:14,44:$V8,45:$V9},{5:[2,3],7:45,13:6,14:7,15:8,16:$V1,19:$V2,20:15,23:$V3,24:$V4,25:$V5,26:$V6,31:$V7,35:10,37:11,39:12,40:13,41:14,44:$V8,45:$V9},o($Va,[2,9]),o($Va,[2,10]),o($Ve,[2,5],{10:[1,46],11:[1,47]}),o($Vf,[2,8]),o([11,36],$Vg,{17:48,27:$Vh}),{11:$Vi,36:[1,50]},o($Vj,[2,45]),{17:52,27:$Vh},{10:[1,53]},o($Va,[2,31]),o($Va,[2,32]),o($Va,[2,34]),o($Va,[2,36]),o($Va,[2,38]),{22:[1,54]},{38:[1,55]},{38:[1,56]},{38:[1,57]},{5:[2,4],13:27,14:28,15:8,16:$V1,19:$V2,20:15,23:$V3,24:$V4,25:$V5,26:$V6,31:$V7,35:10,37:11,39:12,40:13,41:14,44:$V8,45:$V9},o($Ve,[2,6]),{12:[1,58]},{18:59,32:$Vk},{28:[1,61],29:[1,62]},{16:$Vl,27:$Vm,43:63,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74},{16:[1,75]},{18:76,32:$Vk},o($Va,[2,30]),o($Vb,[2,15]),{16:$Vl,27:$Vm,43:77,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74},{16:$Vl,27:$Vm,43:78,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74},{16:$Vl,27:$Vm,43:79,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74},o($Vf,[2,7]),o($Va,[2,13]),{16:$Vv,33:80,74:81,75:82,76:83,77:84,78:85,79:86,80:87,83:$Vw,86:$Vx,94:$Vy,95:$Vz,96:$VA},{29:[1,94]},{32:[2,23]},o([5,8,16,19,23,24,25,26,31,36,44,45],[2,41],{47:$VB,48:$VC,51:$VD,52:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR}),{50:[1,112]},{16:$Vl,27:$Vm,43:113,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74},{16:$Vl,27:$Vm,43:114,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74},{16:$Vl,27:$Vm,43:115,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74},o($VS,[2,67]),o($VS,[2,68]),o($VS,[2,69]),o($VS,[2,70]),o($VS,[2,71]),o($VS,$VT,{73:116,81:118,21:$VU,27:$VV,82:$VW}),o($VS,[2,73]),o([11,27,36],[2,39]),o($Va,[2,14]),o([10,38],[2,42],{47:$VB,48:$VC,51:$VD,52:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR}),o($Vj,[2,43],{47:$VB,48:$VC,51:$VD,52:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR}),o($Vj,[2,44],{47:$VB,48:$VC,51:$VD,52:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR}),{16:$Vv,34:[1,121],74:122,75:82,76:83,77:84,78:85,79:86,80:87,83:$Vw,86:$Vx,94:$Vy,95:$Vz,96:$VA},o($VX,[2,76]),o($VX,[2,77],{10:[1,123]}),o($VX,[2,79]),o($VX,[2,80]),o($VX,[2,81]),o($VX,[2,82],{10:[1,124]}),o($VX,[2,84]),{21:$VU,73:125,81:118,82:$VW},{27:[1,126]},{27:[1,127]},{27:[1,128]},{18:129,32:$Vk},{27:[1,130]},{32:[2,22]},o($VS,[2,46]),o($VS,[2,47]),{16:$Vl,27:$Vm,43:131,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74},{16:$Vl,27:$Vm,43:132,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74},{16:$Vl,27:$Vm,43:133,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74},{16:$Vl,27:$Vm,43:134,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74},{16:$Vl,27:$Vm,43:135,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74},{16:$Vl,27:$Vm,43:136,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74},{16:$Vl,27:$Vm,43:137,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74},{16:$Vl,27:$Vm,43:138,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74},{16:$Vl,27:$Vm,43:139,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74},{16:$Vl,27:$Vm,43:140,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74},{16:$Vl,27:$Vm,43:141,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74},{16:$Vl,27:$Vm,43:142,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74},{16:$Vl,27:$Vm,43:143,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74},{16:$Vl,27:$Vm,43:144,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74},{16:$Vl,27:$Vm,43:145,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74},{16:$Vl,27:$Vm,43:146,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74},o($VS,[2,51]),o($VS,[2,65]),{29:[1,147],47:$VB,48:$VC,51:$VD,52:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR},o($VS,$VY,{81:148,21:$VU,82:$VW}),{16:[1,151],29:[1,150],42:149},o($VZ,[2,87]),{16:[1,152],72:153},{16:$Vl,27:$Vm,43:154,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74},o([5,8,16,19,23,24,25,26,31,34,44,45,83,85,86,91,93,94,95,96],[2,28]),o($VX,[2,75]),o($VX,[2,78]),o($VX,[2,83]),{21:$VU,36:$V_,81:148,82:$VW},{16:$Vl,27:$Vm,43:156,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74},{16:$Vl,27:$Vm,43:157,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74},{16:$Vl,27:$Vm,43:158,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74},{94:[1,159]},{10:[1,162],16:[1,165],20:163,23:$V3,24:$V4,25:$V5,26:$V6,75:164,97:160,98:161},o([5,8,10,16,19,22,23,24,25,26,29,31,34,36,38,44,45,47,48,51,83,86,91,92,93,94,95,96],[2,49],{52:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR}),o($V$,[2,50],{54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR}),o($V$,[2,52],{54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR}),o($V$,[2,53],{54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR}),o($V$,[2,54],{54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR}),o($V01,[2,55],{61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR}),o($V01,[2,56],{61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR}),o($V01,[2,57],{61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR}),o($V01,[2,58],{61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR}),o($V11,[2,59],{63:$VO,64:$VP,65:$VQ,66:$VR}),o($V11,[2,60],{63:$VO,64:$VP,65:$VQ,66:$VR}),o($V21,[2,61],{66:$VR}),o($V21,[2,62],{66:$VR}),o($V21,[2,63],{66:$VR}),o($VS,[2,64]),o([5,8,10,16,19,22,23,24,25,26,29,31,34,36,38,44,45,47,48,83,86,91,92,93,94,95,96],[2,48],{51:$VD,52:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR}),o($VS,[2,66]),o($VZ,[2,86]),{11:$Vi,27:[1,166]},o($VZ,[2,92]),o([11,27],$Vg),o($VZ,[2,88],{27:$VV}),o($VZ,[2,90]),{22:[1,167],47:$VB,48:$VC,51:$VD,52:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR},{16:$Vl,27:$Vm,43:168,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74},{29:[1,169],47:$VB,48:$VC,51:$VD,52:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR},{29:[1,170],47:$VB,48:$VC,51:$VD,52:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR},{29:[1,171],47:$VB,48:$VC,51:$VD,52:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR},{27:[1,172]},{29:[1,173]},{10:[1,174]},{10:[1,176],16:$Vl,27:$Vm,43:175,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74},{16:[1,177]},{10:[2,115]},{16:$Vd,21:$VU,73:125,81:118,82:$VW},o($VZ,[2,91]),o($VZ,[2,89]),o([10,16,29,34,83,86,91,93,94,95,96],[2,85],{47:$VB,48:$VC,51:$VD,52:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR}),{18:178,32:$Vk},{32:[1,179]},{18:180,32:$Vk},{16:$Vl,27:$Vm,43:181,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74},{18:182,32:$Vk},{10:[1,184],16:$Vl,27:$Vm,43:183,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74},{10:[1,185],47:$VB,48:$VC,51:$VD,52:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR},{16:$V31,27:$Vm,43:187,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74,75:188,99:186},{36:[1,190]},o($VX,[2,93],{84:191,85:[1,192]}),{87:193,88:194,90:195,91:$V41},o($VX,[2,104]),{29:[1,197],47:$VB,48:$VC,51:$VD,52:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR},o($VX,[2,106]),{10:[1,198],47:$VB,48:$VC,51:$VD,52:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR},{16:$V31,27:$Vm,29:[2,110],43:187,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74,75:188,99:199},{16:$V31,27:$Vm,29:[2,112],43:187,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74,75:188,99:200},{29:[2,113]},{29:[2,116],47:$VB,48:$VC,51:$VD,52:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR},{29:[2,117]},o($V51,$VT,{81:118,73:201,21:$VU,27:$VV,82:$VW}),{16:$Vl,27:$Vm,43:202,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74},o($VX,[2,94]),{18:203,32:$Vk,76:204,83:$Vw},{34:[1,205]},{34:[2,98],89:206,90:207,91:$V41,93:[1,208]},o($V61,[2,101]),{16:$Vl,27:$Vm,43:209,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74},o([10,16,34,83,86,91,93,94,95,96],[2,105]),{16:$V31,27:$Vm,29:[2,109],43:187,49:$Vn,53:$Vo,62:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:74,75:188,99:210},{29:[2,108]},{29:[2,111]},o($V51,$VY,{81:148,21:$VU,36:$V_,82:$VW}),{10:[2,114],47:$VB,48:$VC,51:$VD,52:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR},o($VX,[2,95]),o($VX,[2,96]),o($VX,[2,97]),{34:[2,99]},o($V61,[2,100]),{92:[1,211]},{47:$VB,48:$VC,51:$VD,52:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,92:[1,212]},{29:[2,107]},{16:$Vv,33:213,74:81,75:82,76:83,77:84,78:85,79:86,80:87,83:$Vw,86:$Vx,94:$Vy,95:$Vz,96:$VA},{16:$Vv,33:214,74:81,75:82,76:83,77:84,78:85,79:86,80:87,83:$Vw,86:$Vx,94:$Vy,95:$Vz,96:$VA},{16:$Vv,34:[2,103],74:122,75:82,76:83,77:84,78:85,79:86,80:87,83:$Vw,86:$Vx,94:$Vy,95:$Vz,96:$VA},o($V61,[2,102],{75:82,76:83,77:84,78:85,79:86,80:87,74:122,16:$Vv,83:$Vw,86:$Vx,94:$Vy,95:$Vz,96:$VA})],
defaultActions: {24:[2,1],62:[2,23],94:[2,22],164:[2,115],186:[2,113],188:[2,117],199:[2,108],200:[2,111],206:[2,99],210:[2,107]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// white spaces are ignored
break;
case 1:// single line comments
break;
case 2:// multiple line comments
break;
case 3:return 12;
break;
case 4:return 16;
break;
case 5: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 67; 
break;
case 6:return 68;
break;
case 7:return 69;
break;
case 8:return 'nullValue';
break;
case 9:return 70;
break;
case 10:return 71;
break;
case 11:return 23;
break;
case 12:return 24;
break;
case 13:return 26;
break;
case 14:return 25;
break;
case 15:return 31;
break;
case 16:return 44;
break;
case 17:return 45;
break;
case 18:return 8;
break;
case 19:return 83;
break;
case 20:return 85;
break;
case 21:return 86;
break;
case 22:return 91;
break;
case 23:return 93;
break;
case 24:return 'breakKW';
break;
case 25:return 'continueKW';
break;
case 26:return 'returnKW';
break;
case 27:return 19;
break;
case 28:return 96;
break;
case 29:return 94;
break;
case 30:return 'defineKW';
break;
case 31:return 'asKW';
break;
case 32:return 'strcKW';
break;
case 33:return 95;
break;
case 34:return 'tryKW';
break;
case 35:return 'catchKW';
break;
case 36:return 'throwKW';
break;
case 37:return 11;
break;
case 38:return 10;
break;
case 39:return 92;
break;
case 40:return 82;
break;
case 41:return 36;
break;
case 42:return 38;
break;
case 43:return 27;
break;
case 44:return 29;
break;
case 45:return 21;
break;
case 46:return 22;
break;
case 47:return 61;
break;
case 48:return 62;
break;
case 49:return 63;
break;
case 50:return 64;
break;
case 51:return 65;
break;
case 52:return 47;
break;
case 53:return 48;
break;
case 54:return 66;
break;
case 55:return 55;
break;
case 56:return 56;
break;
case 57:return 54;
break;
case 58:return 57;
break;
case 59:return 58;
break;
case 60:return 59;
break;
case 61:return 60; 
break;
case 62:return 52;
break;
case 63:return 51;
break;
case 64:return 53;
break;
case 65:return 50;     
break;
case 66:return 5;
break;
case 67:
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:([a-zA-ZñÑ0-9_]\.)+\.j\b)/i,/^(?:([a-zA-ZñÑ_])[a-zA-Z0-9_]*)/i,/^(?:"[^\"]*")/i,/^(?:[0-9]+\b)/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:null\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:integer\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:var\b)/i,/^(?:const\b)/i,/^(?:global\b)/i,/^(?:import\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:define\b)/i,/^(?:as\b)/i,/^(?:strc\b)/i,/^(?:do\b)/i,/^(?:try\b)/i,/^(?:catch\b)/i,/^(?:throw\b)/i,/^(?:,)/i,/^(?:;)/i,/^(?::)/i,/^(?:\.)/i,/^(?:=)/i,/^(?::=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\^\^)/i,/^(?:==)/i,/^(?:===)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:>=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\^)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}